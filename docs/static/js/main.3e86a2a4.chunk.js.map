{"version":3,"sources":["ListItems.js","Schedule.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","react_default","a","createElement","Container","className","key","Row","type","onChange","e","setUpdate","target","value","autoComplete","id","task","index_es","onClick","deleteItem","icon","faMinus","react_flip_move_es","duration","easing","Schedule","scheduleItems","schedule","setScheduleUpdate","htmlFor","time","deleteScheduleItem","startTime","endTime","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","currentItem","completed","addItem","bind","assertThisInitialized","handleInput","toggleComplete","setStart","setEnd","addSchedule","displayItems","localStorage","getItem","setState","JSON","parse","arr","setItem","stringify","preventDefault","newItem","taskItems","concat","toConsumableArray","logTaskList","currentArray","timeArray","Array","from","length","_","index","parseInt","console","log","scheduleArray","logScheduleItems","Date","now","filteredItems","filter","tempItem","x","input","prnDt","toLocaleTimeString","weekday","year","month","day","k","indexOf","substring","Col","faCalendar","onSubmit","placeholder","src_ListItems","min","max","start","end","src_Schedule","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e86a2a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\r\nimport FlipMove from 'react-flip-move';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    // console.log(\"strung\" + JSON.stringify(props.items));\r\n    const listItems = items.map(item =>\r\n    {\r\n     return <Container className=\"list\" key={item.key}>\r\n                <Row className = \"taskItem\">\r\n                    <input type=\"checkbox\" onChange={(e)=>{\r\n                    props.setUpdate(e.target.value, item.key)}}/>\r\n\r\n                    <input type=\"text\" autoComplete=\"new-password\" id={item.key} value={item.task} onChange={(e)=>{\r\n                    props.setUpdate(e.target.value, item.key)}} />\r\n                   \r\n                   <span>\r\n                   <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                                                                props.deleteItem(item.key)\r\n                                                                }} icon={faMinus} />\r\n                    </span>\r\n                </Row>\r\n            </Container>\r\n    })\r\n\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n    </div>;\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './ListItems.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\nimport FlipMove from 'react-flip-move';\nimport { Container, Row } from 'react-bootstrap';\n\n\nfunction Schedule(props){\n    const schedule = props.schedule;\n    //       <p> {item.time + \":00\"} </p>\n    // console.log(\"schedule from js:  \" + JSON.stringify(schedule, null, 4));\n    const scheduleItems = schedule.map(item =>\n    {\n      return <Container className = \"list\" key={item.key}>\n\t       <Row className = \"taskItem\">\n\n\t       \t\t<input type=\"checkbox\" onChange={(e)=>{\n                    props.setScheduleUpdate(e.target.value, item.key)}}/>\n\n                <label htmlFor = \"checkbox\"> {item.time + \":00\"} </label>\n\t\t \n\n\t\t        <input type=\"text\" autoComplete=\"new-password\" id={item.key} \n\t\t         \t\tvalue={item.task} onChange={(e)=>{ \n\t\t         \t\t\t\t\t\t\tprops.setScheduleUpdate(e.target.value, item.key)}} />\n\n\t\t \t\t<span>\n\t\t \t\t<FontAwesomeIcon className=\"faicons\" onClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t            props.deleteScheduleItem(item.key)\n\t\t\t\t\t\t\t\t\t\t\t\t        \t}} icon={faMinus} /></span>\n\t        </Row>\n        </Container>\n    })\n\n    return <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {scheduleItems}\n        </FlipMove>\n    </div>;\n  }\n\n  export default Schedule;","import React from 'react';\n// import logo from './logo.svg';\nimport ListItems from './ListItems'\nimport Schedule from './Schedule'\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\n// import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCalendar } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nvar startTime = 0;\nvar endTime = 0;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      date: \"\",\n      items:[],\n      schedule: [],\n      currentItem:{\n        task:'',\n        key:'',\n        time: 0,\n        completed: false\n      },\n    }\n    // console.log(\"starting out : \" + JSON.stringify(this.state.currentItem));\n\n\n\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.deleteScheduleItem = this.deleteScheduleItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.setScheduleUpdate = this.setScheduleUpdate.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.addSchedule = this.addSchedule.bind(this);\n    this.displayItems = this.displayItems.bind(this);\n  }\n\n   displayItems(e){\n    if (localStorage.getItem(\"taskList\") !== null) {\n        this.setState({ items: JSON.parse(localStorage.getItem(\"taskList\")) })\n    }\n    if (localStorage.getItem(\"scheduleItems\") !== null) {\n      this.setState({ schedule: JSON.parse(localStorage.getItem(\"scheduleItems\")) }) \n     }\n   }\n\n  logTaskList(arr){\n    this.setState({ items: arr })\n    localStorage.setItem(\"taskList\", JSON.stringify(arr));\n  }\n\n  logScheduleItems(arr){\n    this.setState({ schedule: arr })\n    localStorage.setItem(\"scheduleItems\", JSON.stringify(arr));\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.task !== \"\"){\n      const taskItems = [...this.state.items, newItem];\n        this.setState({ //Resets to default\n         currentItem:{\n           task:'',\n           key:'',\n           time: 0,\n           completed: false\n         }\n       })\n      this.logTaskList(taskItems);          \n    }\n  }\n\n\n    //check if this.state.schedule is empty\n    //cycle through it and check if the task is == ''\n      //if not, replace the new task with it\n    //send array to the this.statesscheudle\n\n    // const scheduleArray = timeArray.map(time => { currentArray[x].key === time }\n       // if (currentArray && currentArray.length){ //if the stored array is not empty\n        // if (x < currentArray.length){\n          // if (currentArray.filter(item => item.key === parseInt(startTime) + parseInt(x))) {\n          //   taskValue = item.task;\n          // }\n          // console.log(\"time: \" + currentArray[x].time);\n          // console.log(parseInt(startTime) + parseInt(x));\n          // taskValue = currentArray[x].task;\n          // console.log(\"x: \" + x + \" task value: \" + JSON.stringify(currentArray[x].task));\n        // }\n      // }\n  addSchedule(e){\n    e.preventDefault();\n\n    const currentArray = this.state.schedule;\n    const timeArray = Array.from({length: endTime - startTime + 1}, (_, index) => index + parseInt(startTime));\n\n    console.log(\"current array:  \" + JSON.stringify(currentArray));\n    \n    // let scheduleItem = {}\n    let taskValue = \"\";\n\n    const scheduleArray = timeArray.map(time => {\n      // if (currentArray.some(x => x.key === time )){\n      //   taskValue = x.task;\n      // }\n\n    const scheduleItem = {\n                      task:taskValue,\n                      key: time,\n                      time: time,\n                      completed: false\n                      }\n      \n      return scheduleItem\n    }) // end of thee map function\n      console.log(\"final schedule:\" + JSON.stringify(scheduleArray));\n      this.logScheduleItems(scheduleArray);\n  }\n\n    handleInput(e){\n      this.setState({\n        currentItem:{\n         task: e.target.value,\n         key: Date.now(),\n         time: startTime,\n         completed: false\n       }\n     })\n    }\n\n  //Deletes an item from the list\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.logTaskList(filteredItems);\n  }\n\n  //Deletes an item from the schedule\n  deleteScheduleItem(key){\n    console.log(\"in the deleteScheduleItem method\");\n    const filteredItems= this.state.schedule.filter(item =>\n      item.key!==key);\n    console.log(\"schedule from js:  \" + JSON.stringify(filteredItems, null, 4));\n    this.logScheduleItems(filteredItems);\n  }\n\n  //Updates the task \n  setUpdate(task, key){\n    const tempItem = this.state.items;\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = task;\n      }\n      return tempItem\n    })\n    this.logTaskList(tempItem);\n  }\n\n  //Updates the task in the schedule\n  setScheduleUpdate(input, key){\n    const tempItem = this.state.schedule;\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = input;\n\n        return tempItem\n        // x.completed = !x.completed;  \n      }\n    })\n    // console.log(\"tempItem variable: \" + JSON.stringify(tempItem));\n    this.logScheduleItems(tempItem);\n}\n\n\n   //Toggles the completion of a task\n   toggleComplete(value, key){\n    const tempItem = this.state.items;\n    tempItem.map( x =>{      \n         if(x.key===key){ //If it is the item we are looking for \n           x.completed = !x.completed;\n         }\n       })\n    this.setState({\n     items: tempItem\n   })\n  }\n  setStart(e){\n    e.preventDefault();\n    startTime = e.target.value;\n\n  }\n\n  setEnd(e){\n    e.preventDefault();\n    endTime = e.target.value;\n\n  }\n\n  componentDidMount(){\n    var options = {  weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\n    var prnDt = new Date().toLocaleTimeString('en-us', options);\n    const k = prnDt.indexOf(\",\", prnDt.indexOf(\",\") + 1);\n\n    this.setState({\n      date: prnDt.substring(0,k)\n    })\n    this.displayItems();\n    console.log(\"finish function\");\n  }\n\n\n  render(){\n    return (\n      <Container>\n        <Row className = \"top\">\n        <Col className = \"todayDate\">\n          <FontAwesomeIcon className=\"calendar\" icon={faCalendar}/>\n          {this.state.date}\n        </Col>\n        <Col>\n           <h2> tasks </h2>\n            <div className=\"App\">\n                <form id=\"to-do-form\" onSubmit={this.addItem}>\n                   <input type=\"text\" id = \"taskName\" placeholder=\"Enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n                   <button type=\"submit\">Add Task</button>\n                </form>\n                <p>{this.state.items.task}</p>\n                <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h2> today </h2>\n            <div className=\"App\">\n                <form id=\"to-do-form\" onSubmit={this.addSchedule}>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"Start\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"End\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n                  <button type=\"submit\">Create Schedule</button>\n                </form>\n                <Schedule schedule = {this.state.schedule} deleteScheduleItem={this.deleteScheduleItem} setScheduleUpdate={this.setScheduleUpdate}/>\n            </div>\n          </Col>\n\n          <Col>\n           <h2> tomorrow </h2>\n            <div className=\"App\">\n                <form id=\"to-do-form\" onSubmit={this.addItem}>\n                   <input type=\"text\" id = \"taskName\" placeholder=\"Enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n                   <button type=\"submit\">Add Task</button>\n                </form>\n                <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n\n            </div>\n          </Col>\n        </Row>\n      </Container>\n     );\n  }\n} export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}