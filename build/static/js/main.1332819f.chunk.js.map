{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ListItems","props","listItems","items","map","item","react_default","a","createElement","className","key","type","onChange","e","setUpdate","target","value","autoComplete","id","time","task","style","textDecoration","completed","index_es","onClick","deleteItem","icon","react_flip_move_es","duration","easing","library","add","faTrash","startTime","endTime","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","crossLine","event","classList","toggle","state","currentItem","addItem","bind","assertThisInitialized","handleInput","toggleComplete","populateList","setStart","setEnd","loadItems","console","log","JSON","parse","localStorage","getItem","preventDefault","newItem","taskItems","concat","toConsumableArray","setState","textDecor","setItem","stringify","Date","now","filteredItems","filter","tempItem","x","total","i","onSubmit","min","max","start","end","placeholder","src_ListItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1332819f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    // console.log(\"strung\" + JSON.stringify(props.items));\r\n    const listItems = items.map(item =>\r\n    {\r\n\r\n        // console.log(\"HELLOOJOJJF\"+ item.time)\r\n        // console.log(\"second\"+ item.task)\r\n        // console.log(\"strung\" + JSON.stringify(item));\r\n        // str = JSON.stringify(obj, null, 4); // (Optional) beautiful indented output.\r\n  \r\n       return <div className=\"list\" key={item.key}>\r\n     <p >\r\n        <input type=\"checkbox\" onChange={(e)=>{\r\n             props.setUpdate(e.target.value, item.key)}}/>\r\n\r\n         <input type=\"text\" autoComplete=\"new-password\" id={item.key} value={ item.time + \":00 | \" + item.task} onChange={(e)=>{\r\n             props.setUpdate(e.target.value, item.key)}} style = {{\r\n                    textDecoration: item.completed ? \"line-through\" : null\r\n                }}/>\r\n        <span>\r\n       \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nvar startTime = 0;\nvar endTime = 0;\nvar totalTime = 0;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        task:'',\n        key:'',\n        time: 0,\n        completed: false\n      }\n    }\n    // console.log(\"starting out : \" + JSON.stringify(this.state.currentItem));\n\n  \n\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.populateList = this.populateList.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.loadItems = this.loadItems.bind(this);\n  }\n\n\n\n   loadItems(){\n      console.log(\"continuoous\" + this.state.items);\n      this.state.items = JSON.parse(localStorage.getItem('listItems'));\n   }\n\n    addItem(e){\n      // loadItems();\n      \n      \n      console.log(\"should be objjects:    \" + this.state.items);\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        // console.log(\"newItem: \" + JSON.stringify(this.state.items));\n        if(newItem.task !==\"\"){\n            // console.log(\"logging new item\");\n            const taskItems = [...this.state.items, newItem];\n            // console.log(\"after added item: \" + JSON.stringify(this.state));\n            this.setState({ //Resets to default\n               items: taskItems,\n               currentItem:{\n                 task:'',\n                 key:'',\n                 time: 0,\n                 completed: false,\n                 textDecor: null\n               }\n            })\n\n            localStorage.setItem('listItems', JSON.stringify(taskItems));           \n        }\n      \n    }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n         task: e.target.value,\n         key: Date.now(),\n         time: startTime,\n         completed: false,\n         textDecor: null\n      }\n    })\n\n  }\n\n  //Deletes an item from the list\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n\n   //Toggles the completion of a task\n   toggleComplete(value, key){\n      const tempItem = this.state.items;\n      tempItem.map( x =>{      \n         if(x.key===key){ //If it is the item we are looking for \n           x.completed = !x.completed;\n         }\n      })\n      this.setState({\n         items: tempItem\n      })\n      console.log(\"current completion:\" + this.state.completed);\n  }\n\n  //Updates the task \n  setUpdate(task, key){\n    const tempItem = this.state.items;\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = task;\n        x.completed = !x.completed;  \n\n        if(x.completed){\n            x.textDecor='line';\n         }\n         else{\n            x.textDecor = null;\n         }\n      }\n\n\n      console.log(\"current completion:\" + x.completed);\n    })\n  \n    this.setState({\n      items: tempItem\n    })\n    console.log(\"ITEMS OUTSIDE: \" + JSON.stringify(this.state.items));\n\n    \n  }\n\n  crossLine = event => {\n        const element = event.target;\n        element.classList.toggle(\"crossed-line\");\n    };\n\n\n   populateList(){\n      console.log(\"the start is:\" + startTime);\n      console.log(\"the END is:\" + endTime);\n\n      //take the two key values from the input box\n      const total = endTime - startTime;\n      for (let i = 0; i < total; i++){\n        //create list with the start time and end time as its state\n      }\n   }\n\n   //delete this function later\n   // addItem(e){\n   //      e.preventDefault();\n   //      const newItem = this.state.currentItem;\n   //      if(newItem.task !==\"\"){\n   //          const items = [...this.state.items, newItem];\n   //          this.setState({\n   //              items: items,\n   //              currentItem:{\n   //                  task:'',\n   //                  key:'',\n   //                  time: 0\n   //                }\n   //          })\n   //      }\n   //  }\n\n\n    setStart(e){\n        e.preventDefault();\n        startTime = e.target.value;\n        // populateList();\n   }\n\n    setEnd(e){\n        e.preventDefault();\n        endTime = e.target.value;\n        // populateList();\n    }\n\n\n render(){\n  return (\n   // this.state.items = JSON.parse(localStorage.getItem('listItems'))\n    <div className=\"App\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"number\" min=\"0\" max=\"23\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n          <input type=\"number\" min=\"0\" max=\"23\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n          <input type=\"text\" id = \"taskName\" placeholder=\"Enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add Task</button>\n        </form>\n        <p>{this.state.items.task}</p>\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n        <p> Today </p>\n\n      </header>\n    </div>\n  );\n }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}