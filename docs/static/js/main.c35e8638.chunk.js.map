{"version":3,"sources":["ListItems.js","Schedule.js","Tomorrow.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","react_default","a","createElement","Container","className","key","Row","type","checked","completed","onChange","e","toggleComplete","target","value","autoComplete","task","setUpdate","index_es","onClick","deleteItem","icon","faMinus","react_flip_move_es","duration","easing","Schedule","scheduleItems","schedule","htmlFor","time","Tomorrow","startTime","endTime","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","tomorrow","currentItem","bindFunctions","addTask","bind","handleInput","setStart","setEnd","createSchedule","addToday","addTomorrow","getListItems","deleteAll","getDate","prnDt","Date","toLocaleTimeString","weekday","month","day","k","indexOf","setState","substring","toLowerCase","localStorage","getItem","JSON","parse","listName","arr","defineProperty","setItem","stringify","preventDefault","newItem","taskItems","concat","toConsumableArray","logListItems","currentArray","timeArray","Array","from","length","_","index","parseInt","taskValue","match","find","x","now","filteredItems","filter","tempItem","_this2","Col","faCalendar","onSubmit","min","max","placeholder","start","end","faTrash","src_Schedule","moveToday","faExchangeAlt","src_Tomorrow","id","src_ListItems","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c35e8638.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\r\nimport FlipMove from 'react-flip-move';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <Container className=\"list\" key={item.key}>\r\n            <Row className = \"taskItem\">\r\n                <input type=\"checkbox\" checked = {item.completed} onChange={(e)=>{\r\n                props.toggleComplete(\"items\", e.target.value, item.key)}}/>\r\n                <input type=\"text\" autoComplete=\"new-password\" value={item.task} onChange={(e)=>{\r\n                props.setUpdate(\"items\", e.target.value, item.key)}} />\r\n               <span>\r\n               <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                                                        props.deleteItem(\"items\", item.key)\r\n                                                            }} icon={faMinus} />\r\n                </span>\r\n            </Row>\r\n        </Container>\r\n    })\r\n\r\n    return <div>\r\n        <FlipMove duration={100} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n    </div>;\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './ListItems.css';\nimport FlipMove from 'react-flip-move';\nimport { Container, Row } from 'react-bootstrap';\n\n\nfunction Schedule(props){\n    const schedule = props.schedule;\n    const scheduleItems = schedule.map(item => {\n        return <Container className = \"list\" key={item.key}>\n\t       <Row className = \"taskItem\">\n\t       \t\t<input type=\"checkbox\" checked = {item.completed} onChange={(e)=>{\n                    props.toggleComplete(\"schedule\", e.target.value, item.key)}}/>\n                <label htmlFor = \"checkbox\"> {item.time + \":00\"} </label>\n\t\t        <input type=\"text\" autoComplete=\"new-password\"\n\t\t         \t\tvalue={item.task} onChange={(e)=>{ \n\t\t         \t\t   props.setUpdate(\"schedule\", e.target.value, item.key)}} />\n\t        </Row>\n        </Container>\n    })\n\n    return <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {scheduleItems}\n        </FlipMove>\n    </div>;\n  }\n\n  export default Schedule;","import React from 'react';\nimport './ListItems.css';\nimport FlipMove from 'react-flip-move';\nimport { Container, Row } from 'react-bootstrap';\n\n\nfunction Tomorrow(props){\n    const schedule = props.schedule;\n    const scheduleItems = schedule.map(item => {\n      return <Container className = \"list\" key={item.key}>\n\t       <Row className = \"taskItem\">\n\t       \t\t<input type=\"checkbox\"/>\n                <label htmlFor = \"checkbox\"> {item.time + \":00\"} </label>\n\t\t        <input type=\"text\" autoComplete=\"new-password\"\n\t\t         \t\tvalue={item.task} onChange={(e)=>{ \n\t\t         \t\t\t\t\t\t\tprops.setUpdate(\"tomorrow\", e.target.value, item.key)}} />\n\t        </Row>\n        </Container>\n    })\n\n    return <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {scheduleItems}\n        </FlipMove>\n    </div>;\n  }\n\n  export default Tomorrow;","import React from 'react';\nimport ListItems from './ListItems'\nimport Schedule from './Schedule'\nimport Tomorrow from './Tomorrow'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\nimport { faCalendar } from '@fortawesome/free-solid-svg-icons'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nvar startTime = 0;\nvar endTime = 0;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      date: \"\",\n      items:[],\n      schedule: [],\n      tomorrow: [],\n      currentItem:{\n        task:'',\n        key:'',\n        time: 0,\n        completed: false\n      }\n    }\n    this.bindFunctions();\n  }\n\n  bindFunctions(){\n    this.addTask = this.addTask.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.createSchedule = this.createSchedule.bind(this);\n    this.addToday = this.addToday.bind(this);\n    this.addTomorrow = this.addTomorrow.bind(this);\n    this.getListItems = this.getListItems.bind(this);\n    this.deleteAll = this.deleteAll.bind(this);\n  }\n\n  componentDidMount(){\n    this.getDate();\n    this.getListItems();\n  }\n\n  getDate(){\n    var options = {  weekday: 'long', month: 'long', day: 'numeric'};\n    var prnDt = new Date().toLocaleTimeString('en-us', options);\n    const k = prnDt.indexOf(\",\", prnDt.indexOf(\",\") + 1);\n    this.setState({\n      date: prnDt.substring(0,k).toLowerCase()\n    })\n  }\n\n  getListItems(e){\n    if (localStorage.getItem(\"items\") !== null)\n        this.setState({ items: JSON.parse(localStorage.getItem(\"items\")) })\n    if (localStorage.getItem(\"schedule\") !== null) \n      this.setState({ schedule: JSON.parse(localStorage.getItem(\"schedule\")) }) \n    if (localStorage.getItem(\"tomorrow\") !== null) \n      this.setState({ tomorrow: JSON.parse(localStorage.getItem(\"tomorrow\")) }) \n  }\n\n  logListItems(listName, arr){\n    this.setState({[listName]: arr});\n    localStorage.setItem(listName, JSON.stringify(arr));\n  }\n\n  setStart(e){\n    e.preventDefault();\n    startTime = e.target.value;\n  }\n\n  setEnd(e){\n    e.preventDefault();\n    endTime = e.target.value;\n  }\n\n  addTask(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.task !== \"\"){\n      const taskItems = [...this.state.items, newItem];\n        this.setState({ \n         currentItem:{\n           task:'',\n           key:'',\n           time: 0,\n           completed: false\n         }\n       })\n      this.logListItems(\"items\", taskItems);          \n    }\n  }\n\n  addToday(e){\n    e.preventDefault();\n    const arr = this.createSchedule(\"schedule\");\n    this.logListItems(\"schedule\", arr);\n  }\n\n  addTomorrow(e){\n    e.preventDefault();\n    const arr = this.createSchedule(\"tomorrow\");\n    this.logListItems(\"tomorrow\", arr);\n  }\n\n  //Creates a schedule with given time inputs\n  createSchedule(listName){\n    const currentArray = this.state[listName];\n    const timeArray = Array.from({length: endTime - startTime + 1}, (_, index) => index + parseInt(startTime));\n    let taskValue = \"\";\n    const scheduleArray = timeArray.map(time => {\n      const match = currentArray.find(x => x.key === time);\n      if ( match ){\n        taskValue = match.task;\n      }\n      const scheduleItem = {\n        task: taskValue,\n        key: time,\n        time: time,\n        completed: false\n      }\n      return scheduleItem\n    })\n    return scheduleArray\n  }\n\n  //Creates input for the task list\n  handleInput(e){\n    this.setState({\n      currentItem:{\n       task: e.target.value,\n       key: Date.now(),\n       time: startTime,\n       completed: false\n     }\n   })\n  }\n\n  //Deletes an item from the list\n  deleteItem(listName, key){\n    const filteredItems = this.state[listName].filter(item =>\n      item.key!==key);\n    this.logListItems(listName, filteredItems);\n  }\n\n  deleteAll(listName){\n    this.logListItems(listName, []);\n  }\n\n  //Updates the task \n  setUpdate(listName, task, key){\n    const tempItem = this.state[listName];\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = task;\n      }\n      return tempItem\n    })\n    this.logListItems(listName, tempItem);\n  }\n\n  //Toggles the completion of a task\n  toggleComplete(listName, value, key){\n    const tempItem = this.state[listName];\n    tempItem.map( x => {      \n      if(x.key===key){ \n       x.completed = !x.completed;\n      }\n      return tempItem\n    })\n    this.logListItems(listName, tempItem);\n  }\n\n  moveToday(){\n    this.logListItems(\"schedule\", this.state.tomorrow);\n    this.logListItems(\"tomorrow\", []);\n  }\n  \n  render(){\n    return (\n      <Container>\n        <Row className = \"top\">\n          <Col className = \"todayDate\">\n            <FontAwesomeIcon className=\"calendar\" icon={faCalendar}/>\n            {this.state.date}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h2> today </h2>\n            <div className=\"App\">\n                <form className=\"ToDo\" onSubmit={this.addToday}>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"start\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"end\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n                  <button type=\"submit\">create</button>\n                  <FontAwesomeIcon className=\"faicons\" onClick={() => {this.deleteAll(\"schedule\")}} icon={faTrash}/>\n               </form>\n                <Schedule schedule = {this.state.schedule} deleteItem={this.deleteItem} setUpdate={this.setUpdate} toggleComplete={this.toggleComplete}/>\n            </div>\n          </Col>\n\n          <Col>\n           <h2> tomorrow </h2>\n           <FontAwesomeIcon className=\"faicons\" onClick={() => {this.moveToday()}} icon={faExchangeAlt}/>\n  \n            <div className=\"App\"> \n                <form className=\"ToDo\" onSubmit={this.addTomorrow}>\n                \n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"start\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"end\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n                  <button type=\"submit\">create</button>\n                  <FontAwesomeIcon className=\"faicons\" onClick={() => {this.deleteAll(\"tomorrow\")}} icon={faTrash} />\n               </form>\n                <Tomorrow schedule = {this.state.tomorrow} deleteItem={this.deleteItem} setUpdate={this.setUpdate} toggleComplete={this.toggleComplete}/>\n            </div>\n          </Col>\n\n          <Col>\n           <h2> tasks </h2>\n            <div className=\"App\">\n                <form className=\"ToDo\" onSubmit={this.addTask}>\n                  <input type=\"text\" id = \"taskName\" placeholder=\"enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n                   <button type=\"submit\">add</button>\n                   <FontAwesomeIcon className=\"faicons\" onClick={() => {this.deleteAll(\"items\")}} icon={faTrash} />\n                </form>\n                <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} toggleComplete={this.toggleComplete}/>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n     );\n  }\n} export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}