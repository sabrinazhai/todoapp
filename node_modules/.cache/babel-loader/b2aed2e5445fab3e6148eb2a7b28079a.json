{"ast":null,"code":"import _slicedToArray from \"/Users/sabrinazhai/Desktop/School/PUI/todoapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sabrinazhai/Desktop/School/PUI/todoapp/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\nvar startTime = 0;\nvar endTime = 0;\nvar totalTime = 0;\n\nconst _React$useState = React.useState(localStorage.getItem('myValueInLocalStorage') || ''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.crossLine = event => {\n      const element = event.target;\n      element.classList.toggle(\"crossed-line\");\n    };\n\n    this.state = {\n      items: [],\n      currentItem: {\n        task: '',\n        key: '',\n        time: 0,\n        completed: false\n      },\n      schedule: [] // console.log(\"starting out : \" + JSON.stringify(this.state.currentItem));\n\n    };\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.populateList = this.populateList.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.loadItems = this.loadItems.bind(this);\n  }\n\n  loadItems() {\n    console.log(\"load items ran!\");\n    this.state.items = JSON.parse(localStorage.getItem('listItems'));\n    console.log(\"all items: \" + this.state.items);\n  }\n\n  addItem(e) {\n    // loadItems();\n    console.log(\"should be objjects:    \" + this.state.items);\n    e.preventDefault();\n    const newItem = this.state.currentItem; // console.log(\"newItem: \" + JSON.stringify(this.state.items));\n\n    if (newItem.task !== \"\") {\n      // console.log(\"logging new item\");\n      const taskItems = [...this.state.items, newItem]; // console.log(\"after added item: \" + JSON.stringify(this.state));\n\n      this.setState({\n        //Resets to default\n        items: taskItems,\n        currentItem: {\n          task: '',\n          key: '',\n          time: 0,\n          completed: false\n        }\n      });\n      console.log(\"should be the same as: \" + JSON.stringify(this.state.items));\n      console.log(\"should be the same as: \" + JSON.stringify(taskItems));\n      localStorage.setItem('listItems', JSON.stringify(taskItems));\n    }\n  }\n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        task: e.target.value,\n        key: Date.now(),\n        time: startTime,\n        completed: false\n      }\n    });\n  } //Deletes an item from the list\n\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    });\n  }\n\n  deleteAllItems() {\n    localStorage.clear();\n    this.setState({\n      items: []\n    });\n  } //Toggles the completion of a task\n\n\n  toggleComplete(value, key) {\n    const tempItem = this.state.items;\n    tempItem.map(x => {\n      if (x.key === key) {\n        //If it is the item we are looking for \n        x.completed = !x.completed;\n      }\n    });\n    this.setState({\n      items: tempItem\n    });\n    console.log(\"current completion:\" + this.state.completed);\n  } //Updates the task \n\n\n  setUpdate(task, key) {\n    const tempItem = this.state.items;\n    tempItem.map(x => {\n      if (x.key === key) {\n        x.task = task;\n        x.completed = !x.completed; //For creating strikethrough\n        // if(x.completed){\n        //     x.textDecor='line';\n        //  }\n        //  else{\n        //     x.textDecor = null;\n        //  }\n      }\n\n      console.log(\"current completion:\" + x.completed);\n    });\n    this.setState({\n      items: tempItem\n    });\n    console.log(\"ITEMS OUTSIDE: \" + JSON.stringify(this.state.items));\n  }\n\n  populateList() {\n    console.log(\"the start is:\" + startTime);\n    console.log(\"the END is:\" + endTime);\n    var scheduleList = [];\n\n    for (let currentTime = startTime; currentTime < endTime; currentTime++) {\n      //Create a list of tasks\n      var scheduleItem = {\n        task: '',\n        key: Date.now(),\n        time: currentTime,\n        completed: false\n      };\n      scheduleList = []; //create list with the start time and end time as its state\n    }\n  } //delete this function later\n  // addItem(e){\n  //      e.preventDefault();\n  //      const newItem = this.state.currentItem;\n  //      if(newItem.task !==\"\"){\n  //          const items = [...this.state.items, newItem];\n  //          this.setState({\n  //              items: items,\n  //              currentItem:{\n  //                  task:'',\n  //                  key:'',\n  //                  time: 0\n  //                }\n  //          })\n  //      }\n  //  }\n\n\n  setStart(e) {\n    e.preventDefault();\n    startTime = e.target.value; // populateList();\n  }\n\n  setEnd(e) {\n    e.preventDefault();\n    endTime = e.target.value; // populateList();\n  }\n\n  render() {\n    return (// this.state.items = JSON.parse(localStorage.getItem('listItems'))\n      React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        id: \"to-do-form\",\n        onSubmit: this.addItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        max: \"23\",\n        value: this.state.currentItem.start,\n        onChange: this.setStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        max: \"23\",\n        value: this.state.currentItem.end,\n        onChange: this.setEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"taskName\",\n        placeholder: \"Enter task\",\n        value: this.state.currentItem.task,\n        onChange: this.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Add Task\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, this.state.items.task), React.createElement(ListItems, {\n        items: this.state.items,\n        deleteItem: this.deleteItem,\n        setUpdate: this.setUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \" Today \")))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sabrinazhai/Desktop/School/PUI/todoapp/src/App.js"],"names":["React","ListItems","library","faTrash","add","startTime","endTime","totalTime","useState","localStorage","getItem","value","setValue","App","Component","constructor","props","crossLine","event","element","target","classList","toggle","state","items","currentItem","task","key","time","completed","schedule","addItem","bind","handleInput","deleteItem","toggleComplete","setUpdate","populateList","setStart","setEnd","loadItems","console","log","JSON","parse","e","preventDefault","newItem","taskItems","setState","stringify","setItem","Date","now","filteredItems","filter","item","deleteAllItems","clear","tempItem","map","x","scheduleList","currentTime","scheduleItem","render","start","end"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nvar startTime = 0;\nvar endTime = 0;\nvar totalTime = 0;\n\nconst [value, setValue] = React.useState(\n    localStorage.getItem('myValueInLocalStorage') || ''\n  );\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        task:'',\n        key:'',\n        time: 0,\n        completed: false\n      },\n      schedule: []\n    }\n    // console.log(\"starting out : \" + JSON.stringify(this.state.currentItem));\n\n  \n\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.populateList = this.populateList.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.loadItems = this.loadItems.bind(this);\n  }\n\n\n\n   loadItems(){\n      console.log(\"load items ran!\");\n      this.state.items = JSON.parse(localStorage.getItem('listItems'));\n      console.log(\"all items: \" + this.state.items);\n   }\n\n    addItem(e){\n      // loadItems();\n      \n      \n      console.log(\"should be objjects:    \" + this.state.items);\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        // console.log(\"newItem: \" + JSON.stringify(this.state.items));\n        if(newItem.task !==\"\"){\n            // console.log(\"logging new item\");\n            const taskItems = [...this.state.items, newItem];\n            // console.log(\"after added item: \" + JSON.stringify(this.state));\n            this.setState({ //Resets to default\n               items: taskItems,\n               currentItem:{\n                 task:'',\n                 key:'',\n                 time: 0,\n                 completed: false\n               }\n            })\n\n            console.log(\"should be the same as: \" + JSON.stringify(this.state.items));\n            console.log(\"should be the same as: \" + JSON.stringify(taskItems));\n            localStorage.setItem('listItems', JSON.stringify(taskItems));           \n        }\n      \n    }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n         task: e.target.value,\n         key: Date.now(),\n         time: startTime,\n         completed: false\n      }\n    })\n\n  }\n\n  //Deletes an item from the list\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n\n  deleteAllItems(){\n    localStorage.clear();\n    this.setState({\n      items: []\n    })\n  }\n\n   //Toggles the completion of a task\n   toggleComplete(value, key){\n      const tempItem = this.state.items;\n      tempItem.map( x =>{      \n         if(x.key===key){ //If it is the item we are looking for \n           x.completed = !x.completed;\n         }\n      })\n      this.setState({\n         items: tempItem\n      })\n      console.log(\"current completion:\" + this.state.completed);\n  }\n\n  //Updates the task \n  setUpdate(task, key){\n    const tempItem = this.state.items;\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = task;\n        x.completed = !x.completed;  \n\n        //For creating strikethrough\n        // if(x.completed){\n        //     x.textDecor='line';\n        //  }\n        //  else{\n        //     x.textDecor = null;\n        //  }\n      }\n\n\n      console.log(\"current completion:\" + x.completed);\n    })\n  \n    this.setState({\n      items: tempItem\n    })\n    console.log(\"ITEMS OUTSIDE: \" + JSON.stringify(this.state.items));\n\n    \n  }\n\n  crossLine = event => {\n        const element = event.target;\n        element.classList.toggle(\"crossed-line\");\n    };\n\n\n   populateList(){\n      console.log(\"the start is:\" + startTime);\n      console.log(\"the END is:\" + endTime);\n\n      var scheduleList = [];\n      for (let currentTime = startTime; currentTime < endTime; currentTime++){\n\n        //Create a list of tasks\n        var scheduleItem = {\n                              task:'',\n                              key: Date.now(),\n                              time: currentTime,\n                              completed: false,\n                             }\n        scheduleList = [];\n        //create list with the start time and end time as its state\n      }\n   }\n\n   //delete this function later\n   // addItem(e){\n   //      e.preventDefault();\n   //      const newItem = this.state.currentItem;\n   //      if(newItem.task !==\"\"){\n   //          const items = [...this.state.items, newItem];\n   //          this.setState({\n   //              items: items,\n   //              currentItem:{\n   //                  task:'',\n   //                  key:'',\n   //                  time: 0\n   //                }\n   //          })\n   //      }\n   //  }\n\n\n    setStart(e){\n        e.preventDefault();\n        startTime = e.target.value;\n        // populateList();\n   }\n\n    setEnd(e){\n        e.preventDefault();\n        endTime = e.target.value;\n        // populateList();\n    }\n\n\n render(){\n  return (\n   // this.state.items = JSON.parse(localStorage.getItem('listItems'))\n    <div className=\"App\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"number\" min=\"0\" max=\"23\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n          <input type=\"number\" min=\"0\" max=\"23\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n          <input type=\"text\" id = \"taskName\" placeholder=\"Enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add Task</button>\n        </form>\n        <p>{this.state.items.task}</p>\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n        <p> Today </p>\n\n      </header>\n    </div>\n  );\n }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}