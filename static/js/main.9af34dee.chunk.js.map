{"version":3,"sources":["ListItems.js","Schedule.js","Tomorrow.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","react_default","a","createElement","Container","className","key","Row","type","autoComplete","value","task","onChange","e","setUpdate","target","index_es","onClick","deleteItem","icon","faMinus","react_flip_move_es","duration","easing","Schedule","scheduleItems","schedule","htmlFor","time","Tomorrow","startTime","endTime","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","tomorrow","currentItem","completed","addTask","bind","assertThisInitialized","handleInput","toggleComplete","setStart","setEnd","createSchedule","addToday","addTomorrow","getListItems","getDate","prnDt","Date","toLocaleTimeString","weekday","year","month","day","k","indexOf","setState","substring","localStorage","getItem","JSON","parse","listName","arr","defineProperty","setItem","stringify","preventDefault","newItem","taskItems","concat","toConsumableArray","logListItems","currentArray","timeArray","Array","from","length","_","index","parseInt","taskValue","match","find","x","now","filteredItems","filter","tempItem","Col","faCalendar","onSubmit","id","placeholder","src_ListItems","min","max","start","end","src_Schedule","src_Tomorrow","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9af34dee.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\r\nimport FlipMove from 'react-flip-move';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    // console.log(\"strung\" + JSON.stringify(props.items));\r\n    const listItems = items.map(item =>\r\n    {\r\n     return <Container className=\"list\" key={item.key}>\r\n                <Row className = \"taskItem\">\r\n                    <input type=\"checkbox\"/>\r\n                    <input type=\"text\" autoComplete=\"new-password\" value={item.task} onChange={(e)=>{\r\n                    props.setUpdate(\"items\", e.target.value, item.key)}} />\r\n                   <span>\r\n                   <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                                                            props.deleteItem(\"items\", item.key)\r\n                                                                }} icon={faMinus} />\r\n                    </span>\r\n                </Row>\r\n            </Container>\r\n    })\r\n\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n    </div>;\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './ListItems.css';\nimport FlipMove from 'react-flip-move';\nimport { Container, Row } from 'react-bootstrap';\n\n\nfunction Schedule(props){\n    const schedule = props.schedule;\n    //       <p> {item.time + \":00\"} </p>\n    // console.log(\"schedule from js:  \" + JSON.stringify(schedule, null, 4));\n    const scheduleItems = schedule.map(item =>\n    {\n      return <Container className = \"list\" key={item.key}>\n\t       <Row className = \"taskItem\">\n\t       \t\t<input type=\"checkbox\"/>\n                <label htmlFor = \"checkbox\"> {item.time + \":00\"} </label>\n\t\t        <input type=\"text\" autoComplete=\"new-password\"\n\t\t         \t\tvalue={item.task} onChange={(e)=>{ \n\t\t         \t\t   props.setUpdate(\"schedule\", e.target.value, item.key)}} />\n\t        </Row>\n        </Container>\n    })\n\n    return <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {scheduleItems}\n        </FlipMove>\n    </div>;\n  }\n\n  export default Schedule;","import React from 'react';\nimport './ListItems.css';\nimport FlipMove from 'react-flip-move';\nimport { Container, Row } from 'react-bootstrap';\n\n\nfunction Tomorrow(props){\n    const schedule = props.schedule;\n    //       <p> {item.time + \":00\"} </p>\n    // console.log(\"schedule from js:  \" + JSON.stringify(schedule, null, 4));\n    const scheduleItems = schedule.map(item =>\n    {\n      return <Container className = \"list\" key={item.key}>\n\t       <Row className = \"taskItem\">\n\t       \t\t<input type=\"checkbox\"/>\n                <label htmlFor = \"checkbox\"> {item.time + \":00\"} </label>\n\t\t        <input type=\"text\" autoComplete=\"new-password\"\n\t\t         \t\tvalue={item.task} onChange={(e)=>{ \n\t\t         \t\t\t\t\t\t\tprops.setUpdate(\"tomorrow\", e.target.value, item.key)}} />\n\t        </Row>\n        </Container>\n    })\n\n    return <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {scheduleItems}\n        </FlipMove>\n    </div>;\n  }\n\n  export default Tomorrow;","import React from 'react';\n// import logo from './logo.svg';\nimport ListItems from './ListItems'\nimport Schedule from './Schedule'\nimport Tomorrow from './Tomorrow'\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\nimport { faCalendar } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nvar startTime = 0;\nvar endTime = 0;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      date: \"\",\n      items:[],\n      schedule: [],\n      tomorrow: [],\n      currentItem:{\n        task:'',\n        key:'',\n        time: 0,\n        completed: false\n      },\n    }\n\n    this.addTask = this.addTask.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.createSchedule = this.createSchedule.bind(this);\n    this.addToday = this.addToday.bind(this);\n    this.addTomorrow = this.addTomorrow.bind(this);\n    this.getListItems = this.getListItems.bind(this);\n  }\n\n  componentDidMount(){\n    this.getDate();\n    this.getListItems();\n  }\n\n  getDate(){\n    var options = {  weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\n    var prnDt = new Date().toLocaleTimeString('en-us', options);\n    const k = prnDt.indexOf(\",\", prnDt.indexOf(\",\") + 1);\n\n    this.setState({\n      date: prnDt.substring(0,k)\n    })\n  }\n\n  getListItems(e){\n    if (localStorage.getItem(\"items\") !== null) {\n        this.setState({ items: JSON.parse(localStorage.getItem(\"items\")) })\n    }\n    if (localStorage.getItem(\"schedule\") !== null) {\n      this.setState({ schedule: JSON.parse(localStorage.getItem(\"schedule\")) }) \n     }\n    if (localStorage.getItem(\"tomorrow\") !== null) {\n      this.setState({ tomorrow: JSON.parse(localStorage.getItem(\"tomorrow\")) }) \n     }\n  }\n\n  logListItems(listName, arr){\n    this.setState({[listName]: arr});\n    localStorage.setItem(listName, JSON.stringify(arr));\n  }\n\n  setStart(e){\n    e.preventDefault();\n    startTime = e.target.value;\n  }\n\n  setEnd(e){\n    e.preventDefault();\n    endTime = e.target.value;\n  }\n\n  addTask(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.task !== \"\"){\n      const taskItems = [...this.state.items, newItem];\n        this.setState({ //Resets to default\n         currentItem:{\n           task:'',\n           key:'',\n           time: 0,\n           completed: false\n         }\n       })\n      this.logListItems(\"items\", taskItems);          \n    }\n  }\n\n  addToday(e){\n    e.preventDefault();\n    const arr = this.createSchedule(\"schedule\");\n    this.logListItems(\"schedule\", arr);\n  }\n\n  addTomorrow(e){\n    e.preventDefault();\n    const arr = this.createSchedule(\"tomorrow\");\n    this.logListItems(\"tomorrow\", arr);\n  }\n\n  createSchedule(listName){\n    const currentArray = this.state[listName];\n    const timeArray = Array.from({length: endTime - startTime + 1}, (_, index) => index + parseInt(startTime));\n    let taskValue = \"\";\n\n    const scheduleArray = timeArray.map(time => {\n      const match = currentArray.find(x => x.key === time);\n      if ( match ){\n        taskValue = match.task;\n      }\n      const scheduleItem = {\n        task: taskValue,\n        key: time,\n        time: time,\n        completed: false\n      }\n      return scheduleItem\n    })\n    return scheduleArray\n  }\n\n  //Creates input for the task list\n  handleInput(e){\n    this.setState({\n      currentItem:{\n       task: e.target.value,\n       key: Date.now(),\n       time: startTime,\n       completed: false\n     }\n   })\n  }\n\n  //Deletes an item from the list\n  deleteItem(listName, key){\n    const filteredItems = this.state[listName].filter(item =>\n      item.key!==key);\n    this.logListItems(listName, filteredItems);\n  }\n\n  //Updates the task \n  setUpdate(listName, task, key){\n    const tempItem = this.state[listName];\n    tempItem.map( x =>{      \n      if(x.key===key){\n        x.task = task;\n      }\n      return tempItem\n    })\n    this.logListItems(listName, tempItem);\n  }\n\n  //Toggles the completion of a task\n  toggleComplete(listName, value, key){\n    const tempItem = this.state.items;\n    tempItem.map( x => {      \n      if(x.key===key){ \n       x.completed = !x.completed;\n      }\n      return tempItem\n    })\n    this.logListItems(listName, tempItem);\n  }\n  \n  render(){\n    return (\n      <Container>\n        <Row className = \"top\">\n        <Col className = \"todayDate\">\n          <FontAwesomeIcon className=\"calendar\" icon={faCalendar}/>\n          {this.state.date}\n        </Col>\n        <Col>\n           <h2> tasks </h2>\n            <div className=\"App\">\n                <form className=\"ToDo\" onSubmit={this.addTask}>\n                   <input type=\"text\" id = \"taskName\" placeholder=\"Enter task\" value= {this.state.currentItem.task} onChange={this.handleInput}></input>\n                   <button type=\"submit\">Add Task</button>\n                </form>\n                <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h2> today </h2>\n            <div className=\"App\">\n                <form className=\"ToDo\" onSubmit={this.addToday}>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"Start\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"End\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n                  <button type=\"submit\">Create Schedule</button>\n                </form>\n                <Schedule schedule = {this.state.schedule} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n            </div>\n          </Col>\n\n          <Col>\n           <h2> tomorrow </h2>\n            <div className=\"App\">\n                <form className=\"ToDo\" onSubmit={this.addTomorrow}>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"Start\" value = {this.state.currentItem.start} onChange = {this.setStart}></input>\n                  <input type=\"number\" min=\"0\" max=\"23\" placeholder = \"End\" value = {this.state.currentItem.end}  onChange = {this.setEnd}></input>\n                  <button type=\"submit\">Create Schedule</button>\n                </form>\n                <Tomorrow schedule = {this.state.tomorrow} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n     );\n  }\n} export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}